module Funciones where

import Musica

instance Functor Musica where
           --fmap :: (a -> b) -> Musica a -> Musica b
           fmap f (Prim (Silencio d)) = Prim (Silencio d)
           fmap f (Prim (Nota d t))   = Prim (Nota d (f t))
           fmap f (m1 :+: m2)         = fmap f m1 :+: fmap f m2
           fmap f (m1 :=: m2)         = fmap f m1 :=: fmap f m2
           fmap f (Instr i m)         = (Instr i (fmap f m))

linea, acorde :: [Musica a] -> Musica a
linea   = foldr (:+:) (silen 0)
acorde  = foldr (:=:) (silen 0)

linea1, acorde1 :: [Musica a] -> Musica a
linea1  = foldr1 (:+:)
acorde1 = foldr1 (:=:)

delay :: Dur -> Musica a -> Musica a
delay d m = silen d :+: m

loop :: Int -> Musica a -> Musica a
loop 0 m = silen 0
loop n m = m :+: loop (n-1) m

loopInfinito :: Musica a -> Musica a
loopInfinito m = m :+: loopInfinito m

reversa :: Musica a -> Musica a
reversa (Instr ins m) = (Instr ins (reversa m))
reversa (m1 :+: m2)   = reversa m2 :+: reversa m1
reversa (m1 :=: m2)   = reversa m2 :=: reversa m1
reversa m             = m

cambiarOct :: Octava -> Musica Tono -> Musica Tono
cambiarOct o = fmap (\(t,o') -> (t,o'+o)) 

octavador :: Octava -> Musica Tono -> Musica Tono
octavador o m = m :=: (cambiarOct o m)


